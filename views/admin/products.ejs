<!--
 * Admin Products Page
 * Purpose: Product management interface
 * Used by: adminController.products
 * Features:
 * - Product listing
 * - Add/Edit/Delete products
 * - Product search and filter
 * - Bulk actions
 * - Stock management
 -->

<!-- Admin Products Page -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title><%= title %> - Admin Panel</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <link rel="stylesheet" href="/css/style.css" />
  </head>
  <body>
    <%- include('../partials/navbar') %>
    <div class="container-fluid">
      <div class="row">
        <%- include('partials/sidebar', { path: '/admin/products' }) %>

        <!-- Main Content -->
        <div class="col-md-10 p-4">
          <h2 class="mb-4">Product Management</h2>

          <div class="d-flex justify-content-between align-items-center mb-4">
            <button
              class="btn btn-primary"
              data-bs-toggle="modal"
              data-bs-target="#addProductModal"
            >
              Add New Product
            </button>
          </div>

          <div class="card font-jack-frost">
            <div class="card-body">
              <div class="table-responsive">
                <table class="table table-striped">
                  <thead>
                    <tr>
                      <th>ID</th>
                      <th>Image</th>
                      <th>Product Name</th>
                      <th>Category</th>
                      <th>Price</th>
                      <th>Discount Price</th>
                      <th>Stock</th>
                      <th>Gender</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% products.forEach(product => { %>
                    <tr data-product-id="<%= product.id %>">
                      <td><%= product.id %></td>
                      <td>
                        <img
                          src="<%= product.image_url || '/images/products/no-image.jpg' %>"
                          alt="<%= product.name %>"
                          style="width: 50px; height: 50px; object-fit: cover"
                          onerror="this.src='/images/products/no-image.jpg'"
                        />
                      </td>
                      <td><%= product.name %></td>
                      <td><%= product.category_name || 'Uncategorized' %></td>
                      <td><%= product.formatted_price %></td>
                      <td><%= product.formatted_discount_price || '-' %></td>
                      <td><%= product.stock %></td>
                      <td><%= product.gender ? product.gender.charAt(0).toUpperCase() + product.gender.slice(1) : '-' %></td>
                      <td>
                        <div class="btn-group">
                          <button
                            class="btn btn-sm btn-info"
                            onclick="editProduct('<%= product.id %>')"
                          >
                            Edit
                          </button>
                          <button
                            class="btn btn-sm btn-danger"
                            onclick="deleteProduct('<%= product.id %>')"
                          >
                            Delete
                          </button>
                        </div>
                      </td>
                    </tr>
                    <% }); %>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Add Product Modal -->
    <div class="modal fade" id="addProductModal" tabindex="-1">
      <div class="modal-dialog modal-lg font-jack-frost">
        <div class="modal-content">
          <form id="addProductForm">
            <div class="modal-header">
              <h5 class="modal-title">Add New Product</h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
              ></button>
            </div>
            <div class="modal-body">
              <!-- Form fields same as before -->
              <div class="mb-3">
                <label for="name" class="form-label">Product Name</label>
                <input
                  type="text"
                  class="form-control"
                  id="name"
                  name="name"
                  required
                />
              </div>
              <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea
                  class="form-control"
                  id="description"
                  name="description"
                  rows="3"
                ></textarea>
              </div>
              <div class="row">
                <div class="col-md-6 mb-3">
                  <label for="price" class="form-label">Price</label>
                  <input
                    type="number"
                    class="form-control"
                    id="price"
                    name="price"
                    step="0.01"
                    required
                  />
                </div>
                <div class="col-md-6 mb-3">
                  <label for="discount_price" class="form-label"
                    >Discount Price</label
                  >
                  <input
                    type="number"
                    class="form-control"
                    id="discount_price"
                    name="discount_price"
                    step="0.01"
                  />
                </div>
              </div>
              <div class="row">
                <div class="col-md-6 mb-3">
                  <label for="category_id" class="form-label">Category</label>
                  <select
                    class="form-select"
                    id="category_id"
                    name="category_id"
                    required
                  >
                    <option value="">Select Category</option>
                    <% categories.forEach(category => { %>
                    <option value="<%= category.id %>">
                      <%= category.name %>
                    </option>
                    <% }); %>
                  </select>
                </div>
                <div class="col-md-6 mb-3">
                  <label for="stock" class="form-label">Stock</label>
                  <input
                    type="number"
                    class="form-control"
                    id="stock"
                    name="stock"
                    required
                  />
                </div>
              </div>
              <div class="mb-3">
                <label for="gender" class="form-label">Gender</label>
                <select class="form-select" id="gender" name="gender" required>
                  <option value="">Select Gender</option>
                  <option value="men">Men</option>
                  <option value="women">Women</option>
                  <option value="kids">Kids</option>
                  <option value="unisex">Unisex</option>
                </select>
              </div>
            </div>
            <div class="modal-footer">
              <button
                type="button"
                class="btn btn-secondary"
                data-bs-dismiss="modal"
              >
                Close
              </button>
              <button
                type="button"
                class="btn btn-primary"
                onclick="saveProduct()"
              >
                Save
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Edit Product Modal -->
    <div class="modal fade" id="editProductModal" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <form id="editProductForm" enctype="multipart/form-data">
            <div class="modal-header">
              <h5 class="modal-title">Edit Product</h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
              ></button>
            </div>
            <div class="modal-body">
              <input type="hidden" id="edit_id" name="id" />
              <div class="mb-3">
                <label for="edit_name" class="form-label">Product Name</label>
                <input
                  type="text"
                  class="form-control"
                  id="edit_name"
                  name="name"
                  required
                />
              </div>
              <div class="mb-3">
                <label for="edit_description" class="form-label"
                  >Description</label
                >
                <textarea
                  class="form-control"
                  id="edit_description"
                  name="description"
                  rows="3"
                ></textarea>
              </div>
              <div class="mb-3">
                <label for="edit_image" class="form-label">Product Image</label>
                <input
                  type="file"
                  class="form-control"
                  id="edit_image"
                  name="image"
                  accept="image/*"
                />
                <small class="text-muted"
                  >Leave empty to keep current image</small
                ><br />
                <img
                  id="current_image"
                  src="/images/products/no-image.jpg"
                  alt="Current"
                  style="width: 100px; height: 100px; margin-top: 10px"
                />
              </div>
              <div class="row">
                <div class="col-md-6 mb-3">
                  <label for="edit_price" class="form-label">Price</label>
                  <input
                    type="number"
                    class="form-control"
                    id="edit_price"
                    name="price"
                    step="0.01"
                    required
                  />
                </div>
                <div class="col-md-6 mb-3">
                  <label for="edit_discount_price" class="form-label"
                    >Discount Price</label
                  >
                  <input
                    type="number"
                    class="form-control"
                    id="edit_discount_price"
                    name="discount_price"
                    step="0.01"
                  />
                </div>
              </div>
              <div class="row">
                <div class="col-md-6 mb-3">
                  <label for="edit_category_id" class="form-label">Category</label>
                  <select
                    class="form-select"
                    id="edit_category_id"
                    name="category_id"
                    required
                  >
                    <option value="">Select Category</option>
                    <% categories.forEach(category => { %>
                    <option value="<%= category.id %>">
                      <%= category.name %>
                    </option>
                    <% }); %>
                  </select>
                </div>
                <div class="col-md-6 mb-3">
                  <label for="edit_stock" class="form-label">Stock</label>
                  <input
                    type="number"
                    class="form-control"
                    id="edit_stock"
                    name="stock"
                    required
                  />
                </div>
              </div>
              <div class="mb-3">
                <label for="edit_gender" class="form-label">Gender</label>
                <select class="form-select" id="edit_gender" name="gender" required>
                  <option value="">Select Gender</option>
                  <option value="men">Men</option>
                  <option value="women">Women</option>
                  <option value="kids">Kids</option>
                  <option value="unisex">Unisex</option>
                </select>
              </div>
            </div>
            <div class="modal-footer">
              <button
                type="button"
                class="btn btn-secondary"
                data-bs-dismiss="modal"
              >
                Close
              </button>
              <button
                type="button"
                class="btn btn-primary"
                onclick="updateProduct()"
              >
                Update
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
    <%- include('../partials/footer') %>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
      // Open the edit modal and populate the fields
      async function editProduct(productId) {
        try {
          if (!productId) {
            throw new Error('Invalid product ID');
          }

          const response = await fetch(`/admin/products/${productId}`);
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const result = await response.json();

          if (!result.success) {
            throw new Error(result.message || 'Failed to load product');
          }

          const product = result.product;
          if (!product || !product.id) {
            throw new Error('Invalid product data received');
          }

          // Populate form fields
          document.getElementById("edit_id").value = product.id;
          document.getElementById("edit_name").value = product.name || '';
          document.getElementById("edit_description").value = product.description || '';
          document.getElementById("edit_price").value = product.price || '';
          document.getElementById("edit_discount_price").value = product.discount_price || '';
          document.getElementById("edit_category_id").value = product.category_id || '';
          document.getElementById("edit_stock").value = product.stock || '';
          
          // Set gender value
          const genderSelect = document.getElementById("edit_gender");
          if (product.gender) {
            genderSelect.value = product.gender.toLowerCase();
          } else {
            genderSelect.value = "kids"; // Default value
          }

          // Update image preview
          const currentImage = document.getElementById("current_image");
          if (product.image_url) {
            currentImage.src = product.image_url;
            currentImage.alt = product.name;
          } else {
            currentImage.src = "/images/products/no-image.jpg";
            currentImage.alt = "No image available";
          }

          // Show modal
          const modal = new bootstrap.Modal(document.getElementById("editProductModal"));
          modal.show();
        } catch (error) {
          console.error('Error in editProduct:', error);
          alert(error.message || "Failed to fetch product details.");
        }
      }

      // Submit new product data
      async function saveProduct() {
        try {
          const form = document.getElementById("addProductForm");
          if (!form) {
            throw new Error('Form not found');
          }

          const formData = new FormData(form);
          
          // Validate required fields
          const requiredFields = ['name', 'price', 'category_id', 'stock', 'gender'];
          for (const field of requiredFields) {
            if (!formData.get(field)) {
              throw new Error(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);
            }
          }

          const response = await fetch("/admin/products", {
            method: "POST",
            body: formData,
          });

          const result = await response.json();

          if (!response.ok) {
            throw new Error(result.message || "Failed to add product");
          }

          // Show success message
          alert('Product added successfully');
          location.reload();
        } catch (error) {
          console.error('Error in saveProduct:', error);
          alert(error.message || "An error occurred while adding the product");
        }
      }

      // Submit updated product data
      async function updateProduct() {
        try {
          const form = document.getElementById("editProductForm");
          if (!form) {
            throw new Error('Form not found');
          }

          const formData = new FormData(form);
          const productId = formData.get("id");

          if (!productId) {
            throw new Error('Product ID is required');
          }

          // Validate required fields
          const requiredFields = ['name', 'price', 'category_id', 'stock', 'gender'];
          for (const field of requiredFields) {
            if (!formData.get(field)) {
              throw new Error(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);
            }
          }

          const response = await fetch(`/admin/products/${productId}`, {
            method: "PUT",
            body: formData,
          });

          const result = await response.json();

          if (!response.ok) {
            throw new Error(result.message || "Failed to update product");
          }

          // Show success message
          alert('Product updated successfully');
          location.reload();
        } catch (error) {
          console.error('Error in updateProduct:', error);
          alert(error.message || "An error occurred during update");
        }
      }

      // Delete a product
      async function deleteProduct(productId) {
        try {
          if (!productId) {
            throw new Error('Product ID is required');
          }

          if (!confirm("Are you sure you want to delete this product?")) {
            return;
          }

          const response = await fetch(`/admin/products/${productId}`, {
            method: "DELETE",
          });

          const result = await response.json();

          if (!response.ok) {
            throw new Error(result.message || "Failed to delete product");
          }

          // Remove the row from the table
          const row = document.querySelector(`tr[data-product-id="${productId}"]`);
          if (row) {
            row.remove();
          }

          // Show success message
          alert('Product deleted successfully');
        } catch (error) {
          console.error('Error in deleteProduct:', error);
          alert(error.message || "An error occurred during deletion");
        }
      }
    </script>
  </body>
</html>
